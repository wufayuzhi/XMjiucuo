name: 自动部署TraeIDE插件

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '22.17.1'
  PLUGIN_NAME: 'traeide-deviation-prevention-plugin'

jobs:
  # 代码质量检查
  quality-check:
    runs-on: ubuntu-latest
    name: 代码质量检查
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 代码格式检查
      run: npm run lint
      
    - name: 运行测试
      run: npm test
      
    - name: 类型检查
      run: npm run type-check
      continue-on-error: true

  # 构建和打包
  build:
    runs-on: ubuntu-latest
    needs: quality-check
    name: 构建插件包
    
    outputs:
      version: ${{ steps.package-info.outputs.version }}
      package-name: ${{ steps.package-info.outputs.package-name }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 构建前端
      run: npm run build
      
    - name: 获取包信息
      id: package-info
      run: |
        VERSION=$(node -p "require('./package.json').version")
        PACKAGE_NAME="${{ env.PLUGIN_NAME }}-v${VERSION}-production"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "package-name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
        echo "Package version: ${VERSION}"
        echo "Package name: ${PACKAGE_NAME}"
        
    - name: 创建生产环境配置
      run: |
        mkdir -p build/${{ env.PLUGIN_NAME }}
        cp -r dist build/${{ env.PLUGIN_NAME }}/
        cp package.json build/${{ env.PLUGIN_NAME }}/
        cp package-lock.json build/${{ env.PLUGIN_NAME }}/
        cp mcp-server.js build/${{ env.PLUGIN_NAME }}/
        cp traeide-config.json build/${{ env.PLUGIN_NAME }}/
        cp README.md build/${{ env.PLUGIN_NAME }}/
        cp -r config build/${{ env.PLUGIN_NAME }}/
        
        # 创建生产环境变量文件
        cat > build/${{ env.PLUGIN_NAME }}/.env.production << 'EOF'
        NODE_ENV=production
        MCP_WEB_PORT=3001
        MCP_HOST=localhost
        MCP_PROTOCOL=http
        WEB_PORT=9000
        WEB_HOST=localhost
        DATA_DIR=./data
        LOG_DIR=./logs
        CACHE_DIR=./cache
        MCP_MAX_MEMORY=512
        NODE_MAX_OLD_SPACE_SIZE=512
        CONNECTION_TIMEOUT=30000
        HEALTH_CHECK_INTERVAL=30000
        MAX_CONCURRENT_REQUESTS=10
        MCP_LOG_LEVEL=info
        LOG_MAX_SIZE=10m
        LOG_MAX_FILES=5
        CORS_ENABLED=true
        RATE_LIMIT_ENABLED=true
        DEEPSEEK_API_KEY=
        DEEPSEEK_API_URL=https://api.deepseek.com/v1/chat/completions
        DEEPSEEK_MODEL=deepseek-chat
        DEEPSEEK_MAX_TOKENS=4096
        DEEPSEEK_TEMPERATURE=0.7
        DEEPSEEK_TIMEOUT=30000
        DEVIATION_THRESHOLD=0.8
        AUTO_ANALYZE_ENABLED=true
        SNAPSHOT_ENABLED=true
        CONTEXT_COMPRESSION_ENABLED=true
        DB_PATH=./data/plugin.db
        DB_BACKUP_ENABLED=true
        CACHE_ENABLED=true
        FILE_CACHE_ENABLED=true
        HEALTH_CHECK_ENABLED=true
        PERF_MONITORING_ENABLED=true
        ERROR_TRACKING_ENABLED=true
        EOF
        
        # 创建启动脚本
        cat > build/${{ env.PLUGIN_NAME }}/start-mcp.bat << 'EOF'
        @echo off
        echo 启动TraeIDE项目偏差预防插件MCP服务器...
        node mcp-server.js
        EOF
        
        cat > build/${{ env.PLUGIN_NAME }}/stop-mcp.bat << 'EOF'
        @echo off
        echo 停止TraeIDE项目偏差预防插件MCP服务器...
        taskkill /f /im node.exe 2>nul
        echo MCP服务器已停止
        EOF
        
    - name: 创建插件包
      run: |
        cd build
        zip -r ${{ steps.package-info.outputs.package-name }}.zip ${{ env.PLUGIN_NAME }}/
        
    - name: 生成部署报告
      run: |
        cat > build/DEPLOYMENT_REPORT.md << EOF
        # TraeIDE项目偏差预防插件部署报告
        
        ## 部署信息
        - **版本**: ${{ steps.package-info.outputs.version }}
        - **构建时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **构建环境**: GitHub Actions (ubuntu-latest)
        - **Node.js版本**: ${{ env.NODE_VERSION }}
        - **包名称**: ${{ steps.package-info.outputs.package-name }}.zip
        
        ## 包含文件
        - 生产环境插件包
        - MCP服务器文件
        - 前端构建文件
        - 配置文件
        - 启动脚本
        - 环境变量模板
        
        ## 安装说明
        1. 下载插件包
        2. 解压到TraeIDE插件目录
        3. 配置.env.production文件
        4. 运行start-mcp.bat启动服务
        
        ## 技术规格
        - 内存限制: 512MB
        - 端口配置: MCP(3001), Web(9000)
        - 日志级别: info
        - 支持自动重启
        EOF
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: plugin-package
        path: |
          build/${{ steps.package-info.outputs.package-name }}.zip
          build/DEPLOYMENT_REPORT.md
        retention-days: 30

  # 发布到GitHub Releases
  release:
    runs-on: ubuntu-latest
    needs: build
    name: 发布到GitHub
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 下载构建产物
      uses: actions/download-artifact@v4
      with:
        name: plugin-package
        path: ./release
        
    - name: 创建发布说明
      run: |
        cat > release-notes.md << EOF
        # TraeIDE项目偏差预防插件 ${{ needs.build.outputs.version }}
        
        ## 🚀 新功能
        - 智能项目偏差检测和预防
        - 实时上下文管理
        - 需求追踪和分析
        - DeepSeek AI集成
        - 会话回顾和历史管理
        
        ## 📦 安装方法
        
        ### 方法1: TraeIDE插件市场
        1. 打开TraeIDE
        2. 点击扩展图标 (Ctrl+Shift+X)
        3. 搜索"项目偏差预防"
        4. 点击安装
        
        ### 方法2: 手动安装
        1. 下载 \`${{ needs.build.outputs.package-name }}.zip\`
        2. 解压到TraeIDE插件目录
        3. 重启TraeIDE
        4. 配置API密钥
        
        ## 🔧 配置要求
        - Node.js 18+
        - TraeIDE 最新版本
        - DeepSeek API密钥（可选）
        
        ## 📋 技术规格
        - 内存使用: < 512MB
        - 启动时间: < 10秒
        - API响应: < 100ms
        - 支持并发: 10个请求
        
        ## 🐛 问题反馈
        如遇到问题，请在GitHub Issues中反馈。
        EOF
        
    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: TraeIDE项目偏差预防插件 ${{ needs.build.outputs.version }}
        body_path: release-notes.md
        files: |
          release/${{ needs.build.outputs.package-name }}.zip
          release/DEPLOYMENT_REPORT.md
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 部署状态通知
  notify:
    runs-on: ubuntu-latest
    needs: [quality-check, build, release]
    name: 部署状态通知
    if: always()
    
    steps:
    - name: 部署成功通知
      if: needs.build.result == 'success'
      run: |
        echo "✅ 部署成功！"
        echo "版本: ${{ needs.build.outputs.version }}"
        echo "包名: ${{ needs.build.outputs.package-name }}.zip"
        
    - name: 部署失败通知
      if: needs.build.result == 'failure'
      run: |
        echo "❌ 部署失败！"
        echo "请检查构建日志获取详细信息"
        exit 1